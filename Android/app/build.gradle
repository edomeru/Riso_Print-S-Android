apply plugin: 'com.android.application'
apply plugin: 'jacoco'

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.2"

    defaultConfig {
        applicationId "jp.co.riso.smartprint"
        minSdkVersion 19
        targetSdkVersion 23
        versionCode 2000100
        versionName "v2.0.3.0"

        testApplicationId "jp.co.riso.smartprint.test"
        testInstrumentationRunner "android.test.InstrumentationTestRunner"

        ndk {
            moduleName "common"
        }
    }

    jacoco {
        version '0.7.2.201409121644'
    }

    sourceSets.main {
        jni.srcDirs = [] //disables automatic ndk-build call in order to use custom Android.mk
        jniLibs.srcDir 'src/main/libs'
    }

    buildTypes {
        debug {
            testCoverageEnabled true
        }
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-project.txt'
        }
    }

    lintOptions {
        abortOnError false
        checkReleaseBuilds false
        disable 'GradleDependency'
    }
}

dependencies {
    compile 'com.android.support:support-v4:23.1.1'
    compile 'org.jacoco:org.jacoco.build:0.7.2.201409121644'
    compile files('libs/com.radaee.pdfex_view.jar')
    androidTestCompile files('libs/the-missing-android-xml-junit-test-runner-release-1.3_2.jar')
}

// Returns NDK build command based on development OS
import org.apache.tools.ant.taskdefs.condition.Os
def getNdkBuildCmd() {
    def ndkDir = plugins.getPlugin('com.android.application').sdkHandler.getNdkFolder()
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        return "${ndkDir}${File.separator}ndk-build.cmd"
    } else {
        return "${ndkDir}${File.separator}ndk-build"
    }
}

// Temporary NDK build task until full support is added by Google.
task ndkBuild(type: Exec) {
    commandLine getNdkBuildCmd(), '-C', file('src/main/jni').absolutePath
}

task ndkClean(type: Exec) {
    commandLine getNdkBuildCmd(), '-C', file('src/main/jni').absolutePath, 'clean'
}

tasks.withType(JavaCompile) {
    compileTask -> compileTask.dependsOn ndkBuild
}

clean.dependsOn ndkClean

// coverage
task generateJacocoTestReport(type: JacocoReport) {

    def coverageSourceDirs = [
            'src/main/java'
    ]

    group = "Reporting"
    description = "Generates Jacoco coverage reports"
    reports {
        xml{
            enabled = true
            destination "${buildDir}/reports/jacoco/jacoco.xml"
        }
        csv.enabled false
        html{
            enabled true
            destination "${buildDir}/jacocoHtml"
        }
    }

    classDirectories = fileTree(
            dir: 'build/intermediates/classes',
            excludes: ['**/R.class',
                       '**/R$*.class',
                       '**/BuildConfig.*',
                       '**/Manifest*.*',
                       'androidTest/**',
                       '**/com/radaee/pdf/**',
                       '**/eu/erikw/**',
                       '**/fi/harism/curl/**',
                       '**/jp/co/riso/smartdeviceapp/view/MainActivity*.*',
                       '**/jp/co/riso/smartdeviceapp/view/SplashActivity*.*',
                       '**/jp/co/riso/smartdeviceapp/view/base/**',
                       '**/jp/co/riso/smartdeviceapp/view/fragment/**',
                       '**/jp/co/riso/smartdeviceapp/view/jobs/**',
                       '**/jp/co/riso/smartdeviceapp/view/preview/**',
                       '**/jp/co/riso/smartdeviceapp/view/printers/**',
                       '**/jp/co/riso/smartdeviceapp/view/printsettings/**',
                       '**/jp/co/riso/smartdeviceapp/view/webkit/**',
                       '**/jp/co/riso/smartdeviceapp/view/widget/**']
    )

    sourceDirectories = files(coverageSourceDirs)
    additionalSourceDirs = files(coverageSourceDirs)
    executionData = files('build/outputs/code-coverage/connected/coverage.ec')
}

task testReport(type: TestReport) {
    destinationDir = file("$buildDir/reports/allTests")
    // Include the results from the `test` task in all subprojects
    reportOn subprojects*.test
}