apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'jacoco'

jacoco {
    toolVersion = "0.8.6"
}

android {
    compileSdkVersion 31
    buildToolsVersion '31.0.0'

    defaultConfig {
        applicationId "jp.co.riso.smartprint"
        minSdkVersion 23
        targetSdkVersion 31
        versionCode 50500004
        versionName "v5.5.0.4"

        testApplicationId "jp.co.riso.smartprint.test"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        ndkVersion '24.0.8215888'
        externalNativeBuild {
            ndk {
                moduleName "common"
                abiFilters 'armeabi-v7a', 'arm64-v8a'
            }
        }
    }

    sourceSets.main {
        jniLibs.srcDir 'src/main/libs'
    }

    buildTypes {
        debug {
            testCoverageEnabled true
        }

        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-project.txt'
        }
    }

    lint {
        abortOnError false
        checkReleaseBuilds false
        disable 'GradleDependency', 'InconsistentLayout', 'InflateParams', 'SpUsage'
    }

    // Gradle automatically adds 'android.test.runner' as a dependency.
    useLibrary 'android.test.runner'
    useLibrary 'android.test.base'
    useLibrary 'android.test.mock'
}

dependencies {
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'org.jacoco:org.jacoco.build:0.8.6'
    implementation 'androidx.exifinterface:exifinterface:1.0.0'
    implementation 'androidx.appcompat:appcompat:1.0.0'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.preference:preference:1.1.1'
    implementation 'androidx.vectordrawable:vectordrawable:1.1.0'
    implementation 'androidx.vectordrawable:vectordrawable-animated:1.1.0'

    androidTestImplementation files('libs/the-missing-android-xml-junit-test-runner-release-1.3_2.jar')

    // 3rd-party libraries
    implementation project(':scanlibrary')

    // test dependencies
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'

    // Espresso dependencies
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.0'
    androidTestImplementation 'androidx.test.espresso:espresso-intents:3.1.0'

    // Kotlin dependencies
    implementation "androidx.core:core-ktx:1.7.0"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "androidx.activity:activity-ktx:1.4.0"
    implementation "androidx.fragment:fragment-ktx:1.4.1"

}

// Returns NDK build command based on development OS
import org.apache.tools.ant.taskdefs.condition.Os

def getNdkBuildCmd() {
    def ndkDir = android.getNdkDirectory()
//    def ndkDir = plugins.getPlugin('com.android.application').sdkHandler.getNdkFolder()
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        return "${ndkDir}${File.separator}ndk-build.cmd"
    } else {
        return "${ndkDir}${File.separator}ndk-build"
    }
}

// Temporary NDK build task until full support is added by Google.
task ndkBuild(type: Exec) {
    // In NDK r22, there is bug which causes warning in ndk-build if output-sync is enabled
    // https://github.com/android/ndk/issues/1492
    // workaround is to disable it by adding --output-sync=none
    commandLine getNdkBuildCmd(), '--output-sync=none', '-C', file('src/main/jni').absolutePath
}

task ndkClean(type: Exec) {
    // In NDK r22, there is bug which causes warning in ndk-build if output-sync is enabled
    // https://github.com/android/ndk/issues/1492
    // workaround is to disable it by adding --output-sync=none
    commandLine getNdkBuildCmd(), '--output-sync=none', '-C', file('src/main/jni').absolutePath, 'clean'
}

tasks.withType(JavaCompile) {
    compileTask -> compileTask.dependsOn ndkBuild
}

clean.dependsOn ndkClean

// coverage
task generateJacocoTestReport(type: JacocoReport, dependsOn: ['createDebugCoverageReport', 'testDebugUnitTest']) {
    def coverageSourceDirs = [
            'src/main/java'
    ]

    group = "Reporting"
    description = "Generates Jacoco coverage reports"
    reports {
        xml{
            required.set(true)
            destination file("${buildDir}/reports/jacoco/jacoco.xml")
        }
        csv.required.set(false)
        html{
            required.set(true)
            destination file("${buildDir}/jacocoHtml")
        }
    }

    classDirectories.from = fileTree(
            dir: 'build/intermediates/classes',
            excludes: ['**/R.class',
                       '**/R$*.class',
                       '**/BuildConfig.*',
                       '**/Manifest*.*',
                       'androidTest/**',
                       '**/com/radaee/pdf/**',
                       '**/eu/erikw/**',
                       '**/fi/harism/curl/**',
                       '**/jp/co/riso/smartdeviceapp/view/MainActivity*.*',
                       '**/jp/co/riso/smartdeviceapp/view/SplashActivity*.*',
                       '**/jp/co/riso/smartdeviceapp/view/base/**',
                       '**/jp/co/riso/smartdeviceapp/view/fragment/**',
                       '**/jp/co/riso/smartdeviceapp/view/jobs/**',
                       '**/jp/co/riso/smartdeviceapp/view/preview/**',
                       '**/jp/co/riso/smartdeviceapp/view/printers/**',
                       '**/jp/co/riso/smartdeviceapp/view/printsettings/**',
                       '**/jp/co/riso/smartdeviceapp/view/webkit/**',
                       '**/jp/co/riso/smartdeviceapp/view/widget/**']
    )
    sourceDirectories.from = files(coverageSourceDirs)
    additionalSourceDirs.from = files(coverageSourceDirs)
    executionData.from = files('build/outputs/code-coverage/connected/coverage.ec')
}

task testReport(type: TestReport) {
    destinationDir = file("$buildDir/reports/allTests")
    // Include the results from the `test` task in all subprojects
    reportOn subprojects*.test
}
repositories {
    mavenCentral()
}
